#!/bin/bash

#-------#
# DEBUG #
#-------#
#set -xv

#-------------#
# SCRIPT NAME #
#-------------#
_name_=${0##*/}

#---------------------#
# SYSTEM ARCHITECTURE #
#---------------------#
_ARCH_=$(dpkg --print-architecture)

#----------#
# LOG FILE #
#----------#
_APT_LOG_="/var/log/apt/history.log"

#--------------#
# ACTIONS LIST #
#--------------#
declare -A _ACTION_=(["install"]="${_APT_UNDO_INSTALL_:-purge --autoremove}" ["remove"]="${_APT_UNDO_REMOVE_:-install}" ["Purge"]="${_APT_UNDO_PURGE_:-install}")

#---------------------------#
# CHECK FOR USER PERMISSION #
#---------------------------#
[ "$UID" -ne "0" ] && {
	echo -e "${_name_^}: Permission Denied, require superuser privilege"
	exit 2
}

#------------------#
# CHECK FOR NUMBER #
#------------------#
_number_check_(){
_count_=${1:-1}

[ -n "${_count_##[1-9]*}" ] && {
	echo -e "${_name_^}: Invalid number for --count "
	exit 2
}
}

#-------------#
# UNDO COUNT  #
#-------------#{{{
_undo_count_(){
local line pkg _PKGS_
declare -a _list_
local _number_="0"

# create list of ACTION line
while read -ra line ;do
	[ "${line[0]}" = "${_action_^}:" ] && {
		_list_[$_number_]="${line[@]:1}"
		((_number_++))
	}
done < $_APT_LOG_

# get the last number of line
((_number_ = _number_ - _count_))

for i in ${_list_[@]:$_number_}; do
	[[ "$i" =~ :[a-z] ]] && _PKGS_+="$i "
done

eval "apt ${_ACTION_[$_action_]} $_PKGS_"
}
#}}}

#--------------------------#
# UNDO THE ACTION WITH PKG #
#--------------------------#{{{
_undo_undo_(){
local _pkg_=$1
local _resulte_ _PKGS_

while read -ra line ; do
	[ "${line[0]}" = "${_action_^}:" ] && {
		[[ "${line[@]}" =~ ${_pkg_} ]] && _resulte_="${line[@]:1}"
	}
done < $_APT_LOG_

[ -z "$_resulte_" ] && { echo -e "${_name_^}: No Result Found for $_pkg_"; exit 2; }

for i in $_resulte_ ; do
	[[ "$i" =~ :[a-z] ]] && _PKGS_+="${i} "
done

eval "apt ${_ACTION_[$_action_]} $_PKGS_"
}
#}}}

#---------------#
# MAIN FUNCTION #
#---------------#{{{
_main_(){
case "${1^^}" in
	INSTALL|REMOVE|PURGE )
		_action_=${1,,}

		case "$2" in
			-c|--count )
				_number_check_ "$3"
				_undo_count_
				;;
			-u|--undo )
				_undo_undo_ "$3"
				;;
		esac
		;;
	* )
		echo -e "${_name_^}: $1 Invalid Action"
		exit 100
		;;
esac
}
#}}}

#------------------------#
# EXEC THE MAIN FUNCTION #
#------------------------#
_main_ "$@"
